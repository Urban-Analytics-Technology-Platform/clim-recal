---
title: "UKCP 2.2 Temporal Interpolation"
format:
  html:
    code-fold: true
execute:
  cache: true
jupyter: python3
---

To align climate projections with measured records, we interpolate five or six extra time points---standard or leap years respectively---per year.

```{python}
#| label: tasmax-time-series

from typing import Final
from pathlib import Path

from xarray.core.types import T_Dataset
from xarray import open_dataset
from matplotlib import pyplot as plt
from matplotlib.figure import Figure

from clim_recal.utils.data import VariableOptions, RunOptions
from clim_recal.utils.xarray import (
    annual_group_xr_time_series,
    join_xr_time_series_var,
    plot_xarray,
)
from clim_recal.utils.core import climate_data_mount_path

plot_folder: Final[Path] = Path("./assets")
cpm_raw_median_folder: Final[Path] = plot_folder / 'cpm-raw-medians'
cpm_convert_median_folder: Final[Path] = plot_folder / 'cpm-converted-medians'

cpm_tasmax_raw_paths: Final[Path] = [
    cpm_raw_median_folder / f"median-{variable}-{run}.nc"
    for run in RunOptions
    for variable in VariableOptions
]
cpm_tasmax_convert_paths: Final[Path] = [
    cpm_convert_median_folder / f"median-{variable}-{run}.nc"
    for run in RunOptions
    for variable in VariableOptions
]

if cpm_raw_median_folder.is_dir():
    cpm_tasmax_raw_run_01: T_Dataset = open_dataset(cpm_tasmax_raw_paths[0])
if cpm_convert_median_folder.is_dir():
    cpm_tasmax_convert_run_01: T_Dataset = open_dataset(cpm_tasmax_convert_paths[0])

cal_360_day_4_years: Final[int] = 360*4
cal_standard_4_years: Final[int] = 365*3 + 366
```

With the CPM annual timeseries loaded, we can now plot projections from 1 December 1980 to 30 November 2080:

```{python}
#| label: fig-tasmax-raw-time-series
#| fig-cap: "Raw CPM tasmax projection 360 day years"


cpm_tasmax_raw_run_01.tasmax[:cal_360_day_4_years*2].plot()
plt.show()
```

```{python}
#| label: fig-tasmax-convert-time-series
#| fig-cap: "Converted CPM tasmax standard years"

cpm_tasmax_convert_run_01.tasmax[:cal_standard_4_years*2].plot()

plt.show()
```

```{python}
#| label: fig-tasmax-december-overlayed
#| fig-cap: "Compare CPM tasmax 360 vs projected standard leap year December"

check_days: Final[int] = 6
trimmed_raw_to_standard = cpm_tasmax_raw_run_01.tasmax[:check_days].convert_calendar('standard', align_on="year")

trimmed_raw_to_standard.plot(label="raw", marker=".")
cpm_tasmax_convert_run_01.tasmax[:check_days + 1].plot(label="convert", marker=".")
plt.legend()

plt.show()
```

Average annual projections.

```{python}
#| label: fig-tasmax-annual-means
#| fig-cap: "Annual average of means of raw tasmax CPM 360 day years"

annual_raw_means: T_Dataset = annual_group_xr_time_series(
  cpm_tasmax_raw_run_01.tasmax,
  variable_name=VariableOptions.TASMAX,
  plot_path=None,
  time_stamp=None)

annual_convert_means: T_Dataset = annual_group_xr_time_series(
  cpm_tasmax_convert_run_01.tasmax,
  variable_name=VariableOptions.TASMAX,
  plot_path=None,
  time_stamp=None)

annual_raw_means.plot(label='raw')
annual_convert_means.plot(label='convert')
plt.legend()

plt.show()
```

Leap year projection.
```{python}
#| label: fig-tasmax-leap-means
#| fig-cap: "Leap year average of means of raw tasmax CPM 360 day years"

leap_annual_means_raw: T_Dataset = cpm_tasmax_raw_run_01.where(
  cpm_tasmax_raw_run_01.time.dt.year % 4 == 0
)

# leap_annual_means_convert: T_Dataset = cpm_tasmax_convert_run_01.where(
#   cpm_tasmax_convert_run_01.time.dt.year % 4 == 0
# )

leap_annual_means_raw.tasmax.plot(label="raw")
# leap_annual_means_convert.tasmax.plot(label="convert")
plt.legend()

plt.show()
```
